by = "census_division_id"
)
return(df)
}
#-----------------------------------------------------------------------------
# How many states are in each of the census divisions?
# Use:
#    group_by
#    summarize
#-----------------------------------------------------------------------------
num_states_by_cenusus_division_df <- function () {
df <- create_state_info_df() %>%
group_by(census_division_id) %>%
summarize(num_states = n())
return(df)
}
#-----------------------------------------------------------------------------
# Main: Test the functions
#-----------------------------------------------------------------------------
df1 <- create_state_info_df()
View(df1)
df2 <- num_states_by_cenusus_division_df()
View(df2)
#-----------------------------------------------------------------------------
# How many states are in each of the census divisions?
# Use:
#    group_by
#    summarize
#-----------------------------------------------------------------------------
num_states_by_cenusus_division_df <- function () {
df <- create_state_info_df() %>%
group_by(census_division_id) %>%
summarize(num_states = n()) %>%
inner_join(create_state_census_division_name_df,
by = census_division_id)
return(df)
}
#-----------------------------------------------------------------------------
# Main: Test the functions
#-----------------------------------------------------------------------------
df1 <- create_state_info_df()
View(df1)
df2 <- num_states_by_cenusus_division_df()
#-----------------------------------------------------------------------------
# How many states are in each of the census divisions?
# Use:
#    group_by
#    summarize
#-----------------------------------------------------------------------------
num_states_by_cenusus_division_df <- function () {
df <- create_state_info_df() %>%
group_by(census_division_id) %>%
summarize(num_states = n()) %>%
inner_join(create_state_census_division_name_df(),
by = census_division_id)
return(df)
}
#-----------------------------------------------------------------------------
# Main: Test the functions
#-----------------------------------------------------------------------------
df1 <- create_state_info_df()
View(df1)
df2 <- num_states_by_cenusus_division_df()
#-----------------------------------------------------------------------------
# How many states are in each of the census divisions?
# Use:
#    group_by
#    summarize
#-----------------------------------------------------------------------------
num_states_by_cenusus_division_df <- function () {
df <- create_state_info_df() %>%
group_by(census_division_id) %>%
summarize(num_states = n()) %>%
inner_join(create_state_census_division_name_df(),
by = "census_division_id")
return(df)
}
#-----------------------------------------------------------------------------
# Main: Test the functions
#-----------------------------------------------------------------------------
df1 <- create_state_info_df()
View(df1)
df2 <- num_states_by_cenusus_division_df()
View(df2)
# example01.R
#-----------------------------------------------------------------------------
# Demonstrates using dylpr to join data frames
#-----------------------------------------------------------------------------
library("dplyr")
#-----------------------------------------------------------------------------
# Data Wrangle: Read data file and select two columns and rename them to
#   state_code
#   state_division_id
# And revmove all duplicates
# This function reduces about 3,500 rows to 50 rows (one for each state)
#-----------------------------------------------------------------------------
create_state_census_division_df <- function() {
# Read the file
df_t <- read.csv("./data/natural-amenity-simplified.csv",
header = TRUE,
stringsAsFactors = FALSE
)
# Data wrangling
df <- df_t %>%
select(    state_code = "STATE",
census_division_id = "Census.Division") %>%
distinct()
# Check if things seem to be correct
if (nrow(df) != 50 ) {
stop("Should be 50 rows - one for each state")
}
# View(df_t)
# View(df)
# Write the file
write.csv(df,"./data/state_census_division.csv", row.names=FALSE)
return(df)
}
#-----------------------------------------------------------------------------
# Creates a data frame that maps census_division_id a human readable name
# data frame
#    census_division_id  integer  [1 .. 9]
#    division_name       character
#
# Question: Are there 50 rows in this data frame? Why or why not?
#-----------------------------------------------------------------------------
create_state_census_division_name_df <- function() {
df <- read.csv(textConnection("
census_division_id,division_name
1,New England
2,Middle Atlantic
3,East  North Central
4,West North Central
5,South Atlantic
6,East South Central
7,West South Central
8,Mountain
9,Pacific
"),
stringsAsFactors = FALSE)
return (df)
}
#-----------------------------------------------------------------------------
# Creates a data frame of state name, abbriviation, and code
# data frame
#    state_name     character
#    state_abbrev   character
#    state_code     character   [Length: 2]
#-----------------------------------------------------------------------------
create_state_name_info_df <- function() {
df <- read.csv(textConnection("
state_name,state_abbrev,state_code
Alabama,Ala.,AL
Alaska,Alaska,AK
Arizona,Ariz.,AZ
Arkansas,Ark.,AR
California,Calif.,CA
Colorado,Colo.,CO
Connecticut,Conn.,CT
Delaware,Del.,DE
District of Columbia,D.C.,DC
Florida,Fla.,FL
Georgia,Ga.,GA
Hawaii,Hawaii,HI
Idaho,Idaho,ID
Illinois,Ill.,IL
Indiana,Ind.,IN
Iowa,Iowa,IA
Kansas,Kans.,KS
Kentucky,Ky.,KY
Louisiana,La.,LA
Maine,Maine,ME
Maryland,Md.,MD
Massachusetts,Mass.,MA
Michigan,Mich.,MI
Minnesota,Minn.,MN
Mississippi,Miss.,MS
Missouri,Mo.,MO
Montana,Mont.,MT
Nebraska,Nebr.,NE
Nevada,Nev.,NV
New Hampshire,N.H.,NH
New ersey,N.J.,NJ
New Mexico,N.M.,NM
New York,N.Y.,NY
North Carolina,N.C.,NC
North Dakota,N.D.,ND
Ohio,Ohio,OH
Oklahoma,Okla.,OK
Oregon,Ore.,OR
Pennsylvania,Pa.,PA
Rhode Island,R.I.,RI
South Carolina,S.C.,SC
South Dakota,S.D.,SD
Tennessee,Tenn.,TN
Texas,Tex.,TX
Utah,Utah,UT
Vermont,Vt.,VT
Virginia,Va.,VA
Washington,Wash.,WA
West Virginia,W.Va.,WV
Wisconsin,Wis.,WI
Wyoming,Wyo.,WY
"),
stringsAsFactors = FALSE)
return (df)
}
#-----------------------------------------------------------------------------
# Creates a data frame of state name, abbriviation, and code
# data frame
#    state_code            character   [Length: 2]
#    census_division_id    integer     [1 .. 8]
#
# Note: This data comes from: create_state_census_division_df()
#-----------------------------------------------------------------------------
create_state_code_census_division_df <- function() {
df <- read.csv(textConnection(
"state_code,census_division_id
AL,6
AZ,8
AR,7
CA,9
CO,8
CT,1
DE,5
DC,5
FL,5
GA,5
ID,8
IL,3
IN,3
IA,4
KS,4
KY,6
LA,7
ME,1
MD,5
MA,1
MI,3
MN,4
MS,6
MO,4
MT,8
NE,4
NV,8
NH,1
NJ,2
NM,8
NY,2
NC,5
ND,4
OH,3
OK,7
OR,9
PA,2
RI,1
SC,5
SD,4
TN,6
TX,7
UT,8
VT,1
VA,5
WA,9
WV,5
WI,3
WI,4
WY,8
"),
stringsAsFactors = FALSE)
return(df)
}
#    state_abbrev
#    state_name
#    state_census_id
#    state_census_name
#
# This will require that you combine data from two data frames. Use the dplyr
# join functions.
#
# See: ?join()
#-----------------------------------------------------------------------------
create_state_info_df <- function () {
df <- NULL
# your code goes here
return(df)
}
#-----------------------------------------------------------------------------
# How many states are in each of the census divisions? Show the IDs and
# the names.
#-----------------------------------------------------------------------------
num_states_by_cenusus_division_df <- function () {
df <- NULL
# your code goes here
return(df)
}
#-----------------------------------------------------------------------------
# Main: Test the functions
#-----------------------------------------------------------------------------
df1 <- create_state_info_df()
nrow(create_state_census_division_df())
nrow(create_state_name_info_df())
if (row(create_state_census_division_df()) != nrow(create_state_name_info_df())) {
print ("Number of records in state_census_division and state_name_info data frames are different!")
}
if (nrow(create_state_census_division_df()) != nrow(create_state_name_info_df())) {
print ("Number of records in state_census_division and state_name_info data frames are different!")
}
setwd("~/Desktop/AA04")
removed_rows <- data_frame[-c(1:5, 35:37, 67:69, 100:102, 133:135, 166:168, 199:201),]
View(removed_rows)
setwd("~/Desktop/AA04")
library(dplyr)
library(leaflet)
library(ggplot2)
#reading in CSV data
df <- read.csv("Voting_data.csv",
header = TRUE,
stringsAsFactors = FALSE
)
removed_rows <- data_frame[-c(1:5, 35:37, 67:69, 100:102, 133:135, 166:168, 199:201),]
View(removed_rows)
new_df <- df %>%
select(-X.15,-X.16,-X.17,-X.18)
View(new_df)
vot_pop <- new_df %>%
select(-X.3, -X.4, -X.5, -X.6, -X.7, -X.8, -X.9, -X.10, -X.11, -X.13, -X.14, -X.12)
View(vot_pop)
removed_rows <- data_frame[-c(1:5, 35:37, 67:69, 100:102, 133:135, 166:168, 199:201),]
View(removed_rows)
data_frame <- setNames(vot_pop, c("Year","Total votes (all ages)  \n - by thousands",
"total population (by percent)",
"citizen population"))
View(data_frame)
removed_rows <- data_frame[-c(1:5, 35:37, 67:69, 100:102, 133:135, 166:168, 199:201),]
View(removed_rows)
all_voted <- best_frame %>%
select(best_frame, everything()) %>%
slice(best_frame, 6:34)
View(all_voted)
best_frame <- data_frame[-c(1:5, 35:37, 67:69, 100:102, 133:135, 166:168, 199:201),]
View(best_frame)
all_voted <- best_frame %>%
select(best_frame, everything()) %>%
slice(best_frame, 6:34)
View(all_voted)
all_voted <- best_frame %>%
group_by(everything()) %>%
summarise(6:34)
View(all_voted)
library(dplyr)
library(leaflet)
library(ggplot2)
library(tidyr)
all_voted <- best_frame %>%
group_by(everything()) %>%
summarise(6:34)
View(all_voted)
all_voted <- best_frame %>%
select(everything()) %>%
summarise(6:34)
View(all_voted)
all_voted <- best_frame %>%
select(everything()) %>%
summarise(6,34)
View(all_voted)
all_voted <- best_frame %>%
select(everything()) %>%
slice(6:34)
View(all_voted)
all_voted <- best_frame %>%
select(everything()) %>%
slice(1:29)
View(all_voted)
create_state_info_df <- function () {
df <- NULL
full_join(df)
return(df)
create_state_info_df <- function () {
df <- NULL
new_df <- full_join(df)
return(df)
create_state_info_df <- function () {
df <- NULL
full_join(df)
return(df)
}
all_voted <- best_frame %>%
select(everything(-1)) %>%
setNames(all_voted, c("Voted \n all year")) %>%
slice(1:29)
View(all_voted)
View(all_voted)
all_voted <- best_frame %>%
select(everything(-1)) %>%
setNames(best_frame, c("Voted \n all year")) %>%
slice(1:29)
View(all_voted)
all_voted <- best_frame %>%
select(everything(), -1) %>%
setNames(best_frame, c("Voted \n all year")) %>%
slice(1:29)
View(all_voted)
all_voted <- best_frame %>%
select(everything(-1)) %>%
setNames(best_frame, c("Voted \n all year")) %>%
slice(1:29)
View(all_voted)
all_voted <- best_frame %>%
select(everything(-1)) %>%
setNames(best_frame, c("Voted \n all year")) %>%
slice(1:29)
View(all_voted)
all_voted <- best_frame %>%
select(everything(-1)) %>%
setNames(best_frame, c("Voted \n all year")) %>%
slice(1:29)
View(all_voted)
View(all_voted)
View(all_voted)
View(all_voted)
View(all_voted)
View(all_voted)
View(all_voted)
View(all_voted)
View(all_voted)
View(all_voted)
all_voted <- best_frame %>%
select(everything(-1)) %>%
slice(1:29)
View(all_voted)
all_voted <- best_frame %>%
select(everything()) %>%
slice(1:29)
View(all_voted)
View(all_voted)
View(all_voted)
View(all_voted)
View(all_voted)
View(all_voted)
all_voted <- best_frame %>%
select(everything()) %>%
slice(1:29)
View(all_voted)
all_voted <- setNames(all_voted, c("Year \n
- all voted"))
all_voted <- setNames(all_voted, c("Year \n
- all voted"))
View(all_voted)
all_votes <- setNames(all_voted, c("Year \n
- all voted"))
View(all_votes)
all_voted <- best_frame %>%
select(everything()) %>%
slice(1:29)
View(all_voted)
View(all_voted)
all_voted <- best_frame %>%
select(everything()) %>%
slice(1:29)
View(all_voted)
best_frame <- data_frame[-c(1:5, 35:37, 67:69, 100:102, 133:135, 166:168, 199:201),]
View(best_frame)
setwd("~/Desktop/AA04")
library(dplyr)
library(leaflet)
library(ggplot2)
library(tidyr)
#reading in CSV data -------------
df <- read.csv("Voting_data.csv",
header = TRUE,
stringsAsFactors = FALSE
)
# deleting NA and unneeded columns -------------
new_df <- df %>%
select(-X.15,-X.16,-X.17,-X.18)
View(new_df)
vot_pop <- new_df %>%
select(-X.3, -X.4, -X.5, -X.6, -X.7, -X.8, -X.9, -X.10, -X.11, -X.13, -X.14, -X.12)
View(vot_pop)
# changed column names - easier readability --------------
data_frame <- setNames(vot_pop, c("Year","Total votes (all ages)  \n - by thousands",
"total population (by percent)",
"citizen population"))
View(data_frame)
# deleting uneeded rows
best_frame <- data_frame[-c(1:5, 35:37, 67:69, 100:102, 133:135, 166:168, 199:201),]
View(best_frame)
# pulling data to create new sub data frames for visulizations ------------
# All population who voted -----------
all_voted <- best_frame %>%
select(everything()) %>%
slice(1:29)
View(all_voted)
# All population who registered ---------
all_registered <- best_frame %>%
select(everything()) %>%
slice()
df <- read.csv("Voting_data.csv",
header = TRUE,
stringsAsFactors = FALSE
)
new_df <- df %>%
select(-X.15,-X.16,-X.17,-X.18)
View(new_df)
vot_pop <- new_df %>%
select(-X.3, -X.4, -X.5, -X.6, -X.7, -X.8, -X.9, -X.10, -X.11, -X.13, -X.14, -X.12)
View(vot_pop)
all_voted <- best_frame %>%
select(everything()) %>%
slice(1:29)
View(all_voted)
View(df)
